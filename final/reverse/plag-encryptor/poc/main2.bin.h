/*
   This file has been generated by IDA.
   It contains local type definitions from
   the type library 'main2.bin'
*/

struct _typeobject;
struct PyAsyncMethods;
struct PyNumberMethods;
struct PySequenceMethods;
struct PyMappingMethods;
struct PyBufferProcs;
struct bufferinfo;
struct PyMethodDef;
struct PyMemberDef;
struct PyGetSetDef;
struct PyDictObject;
struct _longobject;
struct PyCodeObject;
struct _frame;
struct _is;
struct pyruntimestate;
struct _xidregitem;
struct _xid;
struct _Py_AuditHookEntry;
struct atexit_callback;
struct _PyAsyncGenWrappedValue;
struct PyBaseExceptionObject;
struct _cframe;
struct Nuitka_MetaPathBasedLoaderEntry;
struct Nuitka_CellObject;
struct Nuitka_FunctionObject;
struct Nuitka_GeneratorObject;

/* 28 */
typedef _typeobject PyTypeObject;

/* 10 */
typedef __int64 __ssize_t;

/* 11 */
typedef __ssize_t ssize_t;

/* 26 */
typedef ssize_t Py_ssize_t;

/* 32 */
struct _object
{
  Py_ssize_t ob_refcnt;
  PyTypeObject *ob_type;
};

/* 31 */
typedef _object PyObject;

/* 30 */
struct PyVarObject
{
  PyObject ob_base;
  Py_ssize_t ob_size;
};

/* 33 */
typedef void (*destructor)(PyObject *);

/* 34 */
typedef PyObject *(*getattrfunc)(PyObject *, char *);

/* 35 */
typedef int (*setattrfunc)(PyObject *, char *, PyObject *);

/* 40 */
typedef PyObject *(*reprfunc)(PyObject *);

/* 27 */
typedef Py_ssize_t Py_hash_t;

/* 52 */
typedef Py_hash_t (*hashfunc)(PyObject *);

/* 43 */
typedef PyObject *(*ternaryfunc)(PyObject *, PyObject *, PyObject *);

/* 53 */
typedef PyObject *(*getattrofunc)(PyObject *, PyObject *);

/* 54 */
typedef int (*setattrofunc)(PyObject *, PyObject *, PyObject *);

/* 61 */
typedef int (*visitproc)(PyObject *, void *);

/* 60 */
typedef int (*traverseproc)(PyObject *, visitproc, void *);

/* 44 */
typedef int (*inquiry)(PyObject *);

/* 62 */
typedef PyObject *(*richcmpfunc)(PyObject *, PyObject *, int);

/* 63 */
typedef PyObject *(*getiterfunc)(PyObject *);

/* 64 */
typedef PyObject *(*iternextfunc)(PyObject *);

/* 71 */
typedef PyObject *(*descrgetfunc)(PyObject *, PyObject *, PyObject *);

/* 72 */
typedef int (*descrsetfunc)(PyObject *, PyObject *, PyObject *);

/* 73 */
typedef int (*python_init_proc)(PyObject *, PyObject *, PyObject *);

/* 74 */
typedef PyObject *(*allocfunc)(PyTypeObject *, Py_ssize_t);

/* 75 */
typedef PyObject *(*newfunc)(PyTypeObject *, PyObject *, PyObject *);

/* 76 */
typedef void (*freefunc)(void *);

/* 6 */
typedef unsigned __int64 size_t;

/* 77 */
typedef PyObject *(*vectorcallfunc)(PyObject *, PyObject *const *, size_t, PyObject *);

/* 29 */
struct _typeobject
{
  PyVarObject ob_base;
  const char *tp_name;
  Py_ssize_t tp_basicsize;
  Py_ssize_t tp_itemsize;
  destructor tp_dealloc;
  Py_ssize_t tp_vectorcall_offset;
  getattrfunc tp_getattr;
  setattrfunc tp_setattr;
  PyAsyncMethods *tp_as_async;
  reprfunc tp_repr;
  PyNumberMethods *tp_as_number;
  PySequenceMethods *tp_as_sequence;
  PyMappingMethods *tp_as_mapping;
  hashfunc tp_hash;
  ternaryfunc tp_call;
  reprfunc tp_str;
  getattrofunc tp_getattro;
  setattrofunc tp_setattro;
  PyBufferProcs *tp_as_buffer;
  unsigned __int64 tp_flags;
  const char *tp_doc;
  traverseproc tp_traverse;
  inquiry tp_clear;
  richcmpfunc tp_richcompare;
  Py_ssize_t tp_weaklistoffset;
  getiterfunc tp_iter;
  iternextfunc tp_iternext;
  PyMethodDef *tp_methods;
  PyMemberDef *tp_members;
  PyGetSetDef *tp_getset;
  _typeobject *tp_base;
  PyObject *tp_dict;
  descrgetfunc tp_descr_get;
  descrsetfunc tp_descr_set;
  Py_ssize_t tp_dictoffset;
  python_init_proc tp_init;
  allocfunc tp_alloc;
  newfunc tp_new;
  freefunc tp_free;
  inquiry tp_is_gc;
  PyObject *tp_bases;
  PyObject *tp_mro;
  PyObject *tp_cache;
  PyObject *tp_subclasses;
  PyObject *tp_weaklist;
  destructor tp_del;
  unsigned int tp_version_tag;
  destructor tp_finalize;
  vectorcallfunc tp_vectorcall;
};

/* 37 */
typedef PyObject *(*unaryfunc)(PyObject *);

/* 39 */
enum PySendResult : __int32
{
  PYGEN_RETURN = 0x0,
  PYGEN_ERROR = 0xFFFFFFFF,
  PYGEN_NEXT = 0x1,
};

/* 38 */
typedef PySendResult (*sendfunc)(PyObject *, PyObject *, PyObject **);

/* 36 */
struct PyAsyncMethods
{
  unaryfunc am_await;
  unaryfunc am_aiter;
  unaryfunc am_anext;
  sendfunc am_send;
};

/* 42 */
typedef PyObject *(*binaryfunc)(PyObject *, PyObject *);

/* 41 */
struct PyNumberMethods
{
  binaryfunc nb_add;
  binaryfunc nb_subtract;
  binaryfunc nb_multiply;
  binaryfunc nb_remainder;
  binaryfunc nb_divmod;
  ternaryfunc nb_power;
  unaryfunc nb_negative;
  unaryfunc nb_positive;
  unaryfunc nb_absolute;
  inquiry nb_bool;
  unaryfunc nb_invert;
  binaryfunc nb_lshift;
  binaryfunc nb_rshift;
  binaryfunc nb_and;
  binaryfunc nb_xor;
  binaryfunc nb_or;
  unaryfunc nb_int;
  void *nb_reserved;
  unaryfunc nb_float;
  binaryfunc nb_inplace_add;
  binaryfunc nb_inplace_subtract;
  binaryfunc nb_inplace_multiply;
  binaryfunc nb_inplace_remainder;
  ternaryfunc nb_inplace_power;
  binaryfunc nb_inplace_lshift;
  binaryfunc nb_inplace_rshift;
  binaryfunc nb_inplace_and;
  binaryfunc nb_inplace_xor;
  binaryfunc nb_inplace_or;
  binaryfunc nb_floor_divide;
  binaryfunc nb_true_divide;
  binaryfunc nb_inplace_floor_divide;
  binaryfunc nb_inplace_true_divide;
  unaryfunc nb_index;
  binaryfunc nb_matrix_multiply;
  binaryfunc nb_inplace_matrix_multiply;
};

/* 46 */
typedef Py_ssize_t (*lenfunc)(PyObject *);

/* 47 */
typedef PyObject *(*ssizeargfunc)(PyObject *, Py_ssize_t);

/* 48 */
typedef int (*ssizeobjargproc)(PyObject *, Py_ssize_t, PyObject *);

/* 49 */
typedef int (*objobjproc)(PyObject *, PyObject *);

/* 45 */
struct PySequenceMethods
{
  lenfunc sq_length;
  binaryfunc sq_concat;
  ssizeargfunc sq_repeat;
  ssizeargfunc sq_item;
  void *was_sq_slice;
  ssizeobjargproc sq_ass_item;
  void *was_sq_ass_slice;
  objobjproc sq_contains;
  binaryfunc sq_inplace_concat;
  ssizeargfunc sq_inplace_repeat;
};

/* 51 */
typedef int (*objobjargproc)(PyObject *, PyObject *, PyObject *);

/* 50 */
struct PyMappingMethods
{
  lenfunc mp_length;
  binaryfunc mp_subscript;
  objobjargproc mp_ass_subscript;
};

/* 57 */
typedef bufferinfo Py_buffer;

/* 56 */
typedef int (*getbufferproc)(PyObject *, Py_buffer *, int);

/* 59 */
typedef void (*releasebufferproc)(PyObject *, Py_buffer *);

/* 55 */
struct PyBufferProcs
{
  getbufferproc bf_getbuffer;
  releasebufferproc bf_releasebuffer;
};

/* 66 */
typedef PyObject *(*PyCFunction)(PyObject *, PyObject *);

/* 65 */
struct PyMethodDef
{
  const char *ml_name;
  PyCFunction ml_meth;
  int ml_flags;
  const char *ml_doc;
};

/* 67 */
struct PyMemberDef
{
  const char *name;
  int type;
  Py_ssize_t offset;
  int flags;
  const char *doc;
};

/* 69 */
typedef PyObject *(*getter)(PyObject *, void *);

/* 70 */
typedef int (*setter)(PyObject *, PyObject *, void *);

/* 68 */
struct PyGetSetDef
{
  const char *name;
  getter get;
  setter set;
  const char *doc;
  void *closure;
};

/* 58 */
struct bufferinfo
{
  void *buf;
  PyObject *obj;
  Py_ssize_t len;
  Py_ssize_t itemsize;
  int readonly;
  int ndim;
  char *format;
  Py_ssize_t *shape;
  Py_ssize_t *strides;
  Py_ssize_t *suboffsets;
  void *internal;
};

/* 79 */
typedef Py_ssize_t (*dict_lookup_func)(PyDictObject *, PyObject *, Py_hash_t, PyObject **);

/* 78 */
struct _dictkeysobject
{
  Py_ssize_t dk_refcnt;
  Py_ssize_t dk_size;
  dict_lookup_func dk_lookup;
  Py_ssize_t dk_usable;
  Py_ssize_t dk_nentries;
  char dk_indices[];
};

/* 9 */
typedef unsigned __int64 __uint64_t;

/* 24 */
typedef __uint64_t uint64_t;

/* 81 */
typedef _dictkeysobject PyDictKeysObject;

/* 80 */
struct PyDictObject
{
  PyObject ob_base;
  Py_ssize_t ma_used;
  uint64_t ma_version_tag;
  PyDictKeysObject *ma_keys;
  PyObject **ma_values;
};

/* 82 */
struct __attribute__((aligned(8))) PyBytesObject
{
  PyVarObject ob_base;
  Py_hash_t ob_shash;
  char ob_sval[1];
};

/* 83 */
typedef _longobject PyLongObject;

/* 7 */
typedef unsigned int __uint32_t;

/* 23 */
typedef __uint32_t uint32_t;

/* 85 */
typedef uint32_t digit;

/* 84 */
struct __attribute__((aligned(8))) _longobject
{
  PyVarObject ob_base;
  digit ob_digit[1];
};

/* 86 */
struct PyFloatObject
{
  PyObject ob_base;
  double ob_fval;
};

/* 87 */
struct PyTupleObject
{
  PyVarObject ob_base;
  PyObject *ob_item[1];
};

/* 88 */
struct PyListObject
{
  PyVarObject ob_base;
  PyObject **ob_item;
  Py_ssize_t allocated;
};

/* 89 */
typedef PyObject *(*Py_OpenCodeHookFunction)(PyObject *, void *);

/* 90 */
typedef void (*PyCapsule_Destructor)(PyObject *);

/* 91 */
typedef PyCodeObject PyCodeObject_0;

/* 94 */
struct _PyOpcache;

/* 93 */
typedef struct _PyOpcache _PyOpcache_0;

/* 92 */
struct __attribute__((aligned(4))) PyCodeObject
{
  PyObject ob_base;
  int co_argcount;
  int co_posonlyargcount;
  int co_kwonlyargcount;
  int co_nlocals;
  int co_stacksize;
  int co_flags;
  int co_firstlineno;
  PyObject *co_code;
  PyObject *co_consts;
  PyObject *co_names;
  PyObject *co_varnames;
  PyObject *co_freevars;
  PyObject *co_cellvars;
  Py_ssize_t *co_cell2arg;
  PyObject *co_filename;
  PyObject *co_name;
  PyObject *co_linetable;
  void *co_zombieframe;
  PyObject *co_weakreflist;
  void *co_extra;
  unsigned __int8 *co_opcache_map;
  _PyOpcache_0 *co_opcache;
  int co_opcache_flag;
  unsigned __int8 co_opcache_size;
};

/* 95 */
typedef _frame PyFrameObject;

/* 97 */
typedef char PyFrameState;

/* 98 */
struct PyTryBlock
{
  int b_type;
  int b_handler;
  int b_level;
};

/* 96 */
struct _frame
{
  PyVarObject ob_base;
  _frame *f_back;
  PyCodeObject_0 *f_code;
  PyObject *f_builtins;
  PyObject *f_globals;
  PyObject *f_locals;
  PyObject **f_valuestack;
  PyObject *f_trace;
  int f_stackdepth;
  char f_trace_lines;
  char f_trace_opcodes;
  PyObject *f_gen;
  int f_lasti;
  int f_lineno;
  int f_iblock;
  PyFrameState f_state;
  PyTryBlock f_blockstack[20];
  PyObject *f_localsplus[1];
};

/* 99 */
struct _traceback
{
  PyObject ob_base;
  _traceback *tb_next;
  PyFrameObject *tb_frame;
  int tb_lasti;
  int tb_lineno;
};

/* 100 */
typedef _traceback PyTracebackObject;

/* 101 */
struct PySliceObject
{
  PyObject ob_base;
  PyObject *start;
  PyObject *stop;
  PyObject *step;
};

/* 109 */
typedef _is PyInterpreterState;

/* 166 */
typedef _cframe CFrame;

/* 168 */
typedef int (*Py_tracefunc)(PyObject *, PyFrameObject *, int, PyObject *);

/* 170 */
struct _err_stackitem
{
  PyObject *exc_type;
  PyObject *exc_value;
  PyObject *exc_traceback;
  _err_stackitem *previous_item;
};

/* 169 */
typedef _err_stackitem _PyErr_StackItem;

/* 167 */
struct _cframe
{
  int use_tracing;
  _cframe *previous;
};

/* 108 */
struct _ts
{
  _ts *prev;
  _ts *next;
  PyInterpreterState *interp;
  PyFrameObject *frame;
  int recursion_depth;
  int recursion_headroom;
  int stackcheck_counter;
  int tracing;
  CFrame *cframe;
  Py_tracefunc c_profilefunc;
  Py_tracefunc c_tracefunc;
  PyObject *c_profileobj;
  PyObject *c_traceobj;
  PyObject *curexc_type;
  PyObject *curexc_value;
  PyObject *curexc_traceback;
  _PyErr_StackItem exc_state;
  _PyErr_StackItem *exc_info;
  PyObject *dict;
  int gilstate_counter;
  PyObject *async_exc;
  unsigned __int64 thread_id;
  int trash_delete_nesting;
  PyObject *trash_delete_later;
  void (*on_delete)(void *);
  void *on_delete_data;
  int coroutine_origin_tracking_depth;
  PyObject *async_gen_firstiter;
  PyObject *async_gen_finalizer;
  PyObject *context;
  uint64_t context_ver;
  uint64_t id;
  CFrame root_cframe;
};

/* 8 */
typedef __int64 __int64_t;

/* 13 */
typedef __int64_t int64_t;

/* 117 */
typedef void *PyThread_type_lock;

/* 124 */
struct _Py_atomic_int
{
  __int8 _value[4];
};

/* 123 */
typedef _Py_atomic_int _Py_atomic_int_0;

/* 115 */
struct $F58BBD26E48FA21CAAE7DC4D111B41CF
{
  int (*func)(void *);
  void *arg;
};

/* 136 */
struct _pending_calls
{
  PyThread_type_lock lock;
  _Py_atomic_int_0 calls_to_do;
  int async_exc;
  $F58BBD26E48FA21CAAE7DC4D111B41CF calls[32];
  int first;
  int last;
};

/* 135 */
struct _ceval_state
{
  int recursion_limit;
  _Py_atomic_int_0 eval_breaker;
  _Py_atomic_int_0 gil_drop_request;
  _pending_calls pending;
};

/* 25 */
typedef unsigned __int64 uintptr_t;

/* 139 */
struct PyGC_Head
{
  uintptr_t _gc_next;
  uintptr_t _gc_prev;
};

/* 138 */
struct gc_generation
{
  PyGC_Head head;
  int threshold;
  int count;
};

/* 140 */
struct gc_generation_stats
{
  Py_ssize_t collections;
  Py_ssize_t collected;
  Py_ssize_t uncollectable;
};

/* 137 */
struct _gc_runtime_state
{
  PyObject *trash_delete_later;
  int trash_delete_nesting;
  int enabled;
  int debug;
  gc_generation generations[3];
  PyGC_Head *generation0;
  gc_generation permanent_generation;
  gc_generation_stats generation_stats[3];
  int collecting;
  PyObject *garbage;
  PyObject *callbacks;
  Py_ssize_t long_lived_total;
  Py_ssize_t long_lived_pending;
};

/* 12 */
typedef int wchar_t;

/* 102 */
struct PyWideStringList
{
  Py_ssize_t length;
  wchar_t **items;
};

/* 105 */
struct __attribute__((aligned(8))) PyConfig
{
  int _config_init;
  int isolated;
  int use_environment;
  int dev_mode;
  int install_signal_handlers;
  int use_hash_seed;
  unsigned __int64 hash_seed;
  int faulthandler;
  int tracemalloc;
  int import_time;
  int show_ref_count;
  int dump_refs;
  int malloc_stats;
  wchar_t *filesystem_encoding;
  wchar_t *filesystem_errors;
  wchar_t *pycache_prefix;
  int parse_argv;
  PyWideStringList orig_argv;
  PyWideStringList argv;
  PyWideStringList xoptions;
  PyWideStringList warnoptions;
  int site_import;
  int bytes_warning;
  int warn_default_encoding;
  int inspect;
  int interactive;
  int optimization_level;
  int parser_debug;
  int write_bytecode;
  int verbose;
  int quiet;
  int user_site_directory;
  int configure_c_stdio;
  int buffered_stdio;
  wchar_t *stdio_encoding;
  wchar_t *stdio_errors;
  wchar_t *check_hash_pycs_mode;
  int pathconfig_warnings;
  wchar_t *program_name;
  wchar_t *pythonpath_env;
  wchar_t *home;
  wchar_t *platlibdir;
  int module_search_paths_set;
  PyWideStringList module_search_paths;
  wchar_t *executable;
  wchar_t *base_executable;
  wchar_t *prefix;
  wchar_t *base_prefix;
  wchar_t *exec_prefix;
  wchar_t *base_exec_prefix;
  int skip_source_first_line;
  wchar_t *run_command;
  wchar_t *run_module;
  wchar_t *run_filename;
  int _install_importlib;
  int _init_main;
  int _isolated_interpreter;
};

/* 106 */
typedef PyConfig PyConfig_0;

/* 107 */
typedef _ts PyThreadState;

/* 141 */
typedef PyObject *(*_PyFrameEvalFunction)(PyThreadState *, PyFrameObject *, int);

/* 142 */
struct _warnings_runtime_state
{
  PyObject *filters;
  PyObject *once_registry;
  PyObject *default_action;
  __int64 filters_version;
};

/* 143 */
struct atexit_state
{
  atexit_callback **callbacks;
  int ncallbacks;
  int callback_len;
};

/* 145 */
struct _Py_bytes_state
{
  PyObject *empty_string;
  PyBytesObject *characters[256];
};

/* 148 */
enum _Py_error_handler : __int32
{
  _Py_ERROR_UNKNOWN = 0x0,
  _Py_ERROR_STRICT = 0x1,
  _Py_ERROR_SURROGATEESCAPE = 0x2,
  _Py_ERROR_REPLACE = 0x3,
  _Py_ERROR_IGNORE = 0x4,
  _Py_ERROR_BACKSLASHREPLACE = 0x5,
  _Py_ERROR_SURROGATEPASS = 0x6,
  _Py_ERROR_XMLCHARREFREPLACE = 0x7,
  _Py_ERROR_OTHER = 0x8,
};

/* 147 */
struct __attribute__((aligned(8))) _Py_unicode_fs_codec
{
  char *encoding;
  int utf8;
  char *errors;
  _Py_error_handler error_handler;
};

/* 149 */
struct _Py_unicode_ids
{
  Py_ssize_t size;
  PyObject **array;
};

/* 146 */
struct _Py_unicode_state
{
  PyObject *empty_string;
  PyObject *latin1[256];
  _Py_unicode_fs_codec fs_codec;
  PyObject *unused_interned;
  _Py_unicode_ids ids;
};

/* 150 */
struct _Py_float_state
{
  int numfree;
  PyFloatObject *free_list;
};

/* 151 */
struct _Py_tuple_state
{
  PyTupleObject *free_list[20];
  int numfree[20];
};

/* 152 */
struct __attribute__((aligned(8))) _Py_list_state
{
  PyListObject *free_list[80];
  int numfree;
};

/* 153 */
struct __attribute__((aligned(8))) _Py_dict_state
{
  PyDictObject *free_list[80];
  int numfree;
  PyDictKeysObject *keys_free_list[80];
  int keys_numfree;
};

/* 154 */
struct __attribute__((aligned(8))) _Py_frame_state
{
  PyFrameObject *free_list;
  int numfree;
};

/* 157 */
struct PyAsyncGenASend;

/* 155 */
struct __attribute__((aligned(8))) _Py_async_gen_state
{
  _PyAsyncGenWrappedValue *value_freelist[80];
  int value_numfree;
  PyAsyncGenASend *asend_freelist[80];
  int asend_numfree;
};

/* 160 */
struct _pycontextobject;

/* 159 */
typedef struct _pycontextobject PyContext;

/* 158 */
struct __attribute__((aligned(8))) _Py_context_state
{
  PyContext *freelist;
  int numfree;
};

/* 161 */
struct __attribute__((aligned(8))) _Py_exc_state
{
  PyObject *errnomap;
  PyBaseExceptionObject *memerrors_freelist;
  int memerrors_numfree;
};

/* 163 */
struct ast_state
{
  int initialized;
  PyObject *AST_type;
  PyObject *Add_singleton;
  PyObject *Add_type;
  PyObject *And_singleton;
  PyObject *And_type;
  PyObject *AnnAssign_type;
  PyObject *Assert_type;
  PyObject *Assign_type;
  PyObject *AsyncFor_type;
  PyObject *AsyncFunctionDef_type;
  PyObject *AsyncWith_type;
  PyObject *Attribute_type;
  PyObject *AugAssign_type;
  PyObject *Await_type;
  PyObject *BinOp_type;
  PyObject *BitAnd_singleton;
  PyObject *BitAnd_type;
  PyObject *BitOr_singleton;
  PyObject *BitOr_type;
  PyObject *BitXor_singleton;
  PyObject *BitXor_type;
  PyObject *BoolOp_type;
  PyObject *Break_type;
  PyObject *Call_type;
  PyObject *ClassDef_type;
  PyObject *Compare_type;
  PyObject *Constant_type;
  PyObject *Continue_type;
  PyObject *Del_singleton;
  PyObject *Del_type;
  PyObject *Delete_type;
  PyObject *DictComp_type;
  PyObject *Dict_type;
  PyObject *Div_singleton;
  PyObject *Div_type;
  PyObject *Eq_singleton;
  PyObject *Eq_type;
  PyObject *ExceptHandler_type;
  PyObject *Expr_type;
  PyObject *Expression_type;
  PyObject *FloorDiv_singleton;
  PyObject *FloorDiv_type;
  PyObject *For_type;
  PyObject *FormattedValue_type;
  PyObject *FunctionDef_type;
  PyObject *FunctionType_type;
  PyObject *GeneratorExp_type;
  PyObject *Global_type;
  PyObject *GtE_singleton;
  PyObject *GtE_type;
  PyObject *Gt_singleton;
  PyObject *Gt_type;
  PyObject *IfExp_type;
  PyObject *If_type;
  PyObject *ImportFrom_type;
  PyObject *Import_type;
  PyObject *In_singleton;
  PyObject *In_type;
  PyObject *Interactive_type;
  PyObject *Invert_singleton;
  PyObject *Invert_type;
  PyObject *IsNot_singleton;
  PyObject *IsNot_type;
  PyObject *Is_singleton;
  PyObject *Is_type;
  PyObject *JoinedStr_type;
  PyObject *LShift_singleton;
  PyObject *LShift_type;
  PyObject *Lambda_type;
  PyObject *ListComp_type;
  PyObject *List_type;
  PyObject *Load_singleton;
  PyObject *Load_type;
  PyObject *LtE_singleton;
  PyObject *LtE_type;
  PyObject *Lt_singleton;
  PyObject *Lt_type;
  PyObject *MatMult_singleton;
  PyObject *MatMult_type;
  PyObject *MatchAs_type;
  PyObject *MatchClass_type;
  PyObject *MatchMapping_type;
  PyObject *MatchOr_type;
  PyObject *MatchSequence_type;
  PyObject *MatchSingleton_type;
  PyObject *MatchStar_type;
  PyObject *MatchValue_type;
  PyObject *Match_type;
  PyObject *Mod_singleton;
  PyObject *Mod_type;
  PyObject *Module_type;
  PyObject *Mult_singleton;
  PyObject *Mult_type;
  PyObject *Name_type;
  PyObject *NamedExpr_type;
  PyObject *Nonlocal_type;
  PyObject *NotEq_singleton;
  PyObject *NotEq_type;
  PyObject *NotIn_singleton;
  PyObject *NotIn_type;
  PyObject *Not_singleton;
  PyObject *Not_type;
  PyObject *Or_singleton;
  PyObject *Or_type;
  PyObject *Pass_type;
  PyObject *Pow_singleton;
  PyObject *Pow_type;
  PyObject *RShift_singleton;
  PyObject *RShift_type;
  PyObject *Raise_type;
  PyObject *Return_type;
  PyObject *SetComp_type;
  PyObject *Set_type;
  PyObject *Slice_type;
  PyObject *Starred_type;
  PyObject *Store_singleton;
  PyObject *Store_type;
  PyObject *Sub_singleton;
  PyObject *Sub_type;
  PyObject *Subscript_type;
  PyObject *Try_type;
  PyObject *Tuple_type;
  PyObject *TypeIgnore_type;
  PyObject *UAdd_singleton;
  PyObject *UAdd_type;
  PyObject *USub_singleton;
  PyObject *USub_type;
  PyObject *UnaryOp_type;
  PyObject *While_type;
  PyObject *With_type;
  PyObject *YieldFrom_type;
  PyObject *Yield_type;
  PyObject *__dict__;
  PyObject *__doc__;
  PyObject *__match_args__;
  PyObject *__module__;
  PyObject *_attributes;
  PyObject *_fields;
  PyObject *alias_type;
  PyObject *annotation;
  PyObject *arg;
  PyObject *arg_type;
  PyObject *args;
  PyObject *argtypes;
  PyObject *arguments_type;
  PyObject *asname;
  PyObject *ast;
  PyObject *attr;
  PyObject *bases;
  PyObject *body;
  PyObject *boolop_type;
  PyObject *cases;
  PyObject *cause;
  PyObject *cls;
  PyObject *cmpop_type;
  PyObject *col_offset;
  PyObject *comparators;
  PyObject *comprehension_type;
  PyObject *context_expr;
  PyObject *conversion;
  PyObject *ctx;
  PyObject *decorator_list;
  PyObject *defaults;
  PyObject *elt;
  PyObject *elts;
  PyObject *end_col_offset;
  PyObject *end_lineno;
  PyObject *exc;
  PyObject *excepthandler_type;
  PyObject *expr_context_type;
  PyObject *expr_type;
  PyObject *finalbody;
  PyObject *format_spec;
  PyObject *func;
  PyObject *generators;
  PyObject *guard;
  PyObject *handlers;
  PyObject *id;
  PyObject *ifs;
  PyObject *is_async;
  PyObject *items;
  PyObject *iter;
  PyObject *key;
  PyObject *keys;
  PyObject *keyword_type;
  PyObject *keywords;
  PyObject *kind;
  PyObject *kw_defaults;
  PyObject *kwarg;
  PyObject *kwd_attrs;
  PyObject *kwd_patterns;
  PyObject *kwonlyargs;
  PyObject *left;
  PyObject *level;
  PyObject *lineno;
  PyObject *lower;
  PyObject *match_case_type;
  PyObject *mod_type;
  PyObject *module;
  PyObject *msg;
  PyObject *name;
  PyObject *names;
  PyObject *op;
  PyObject *operand;
  PyObject *operator_type;
  PyObject *ops;
  PyObject *optional_vars;
  PyObject *orelse;
  PyObject *pattern;
  PyObject *pattern_type;
  PyObject *patterns;
  PyObject *posonlyargs;
  PyObject *rest;
  PyObject *returns;
  PyObject *right;
  PyObject *simple;
  PyObject *slice;
  PyObject *step;
  PyObject *stmt_type;
  PyObject *subject;
  PyObject *tag;
  PyObject *target;
  PyObject *targets;
  PyObject *test;
  PyObject *type;
  PyObject *type_comment;
  PyObject *type_ignore_type;
  PyObject *type_ignores;
  PyObject *unaryop_type;
  PyObject *upper;
  PyObject *value;
  PyObject *values;
  PyObject *vararg;
  PyObject *withitem_type;
};

/* 165 */
struct type_cache_entry
{
  unsigned int version;
  PyObject *name;
  PyObject *value;
};

/* 164 */
struct type_cache
{
  type_cache_entry hashtable[4096];
};

/* 110 */
struct __attribute__((aligned(8))) _is
{
  _is *next;
  _ts *tstate_head;
  pyruntimestate *runtime;
  int64_t id;
  int64_t id_refcount;
  int requires_idref;
  PyThread_type_lock id_mutex;
  int finalizing;
  _ceval_state ceval;
  _gc_runtime_state gc;
  PyObject *modules;
  PyObject *modules_by_index;
  PyObject *sysdict;
  PyObject *builtins;
  PyObject *importlib;
  __int64 num_threads;
  size_t pythread_stacksize;
  PyObject *codec_search_path;
  PyObject *codec_search_cache;
  PyObject *codec_error_registry;
  int codecs_initialized;
  PyConfig_0 config;
  int dlopenflags;
  PyObject *dict;
  PyObject *builtins_copy;
  PyObject *import_func;
  _PyFrameEvalFunction eval_frame;
  Py_ssize_t co_extra_user_count;
  freefunc co_extra_freefuncs[255];
  PyObject *before_forkers;
  PyObject *after_forkers_parent;
  PyObject *after_forkers_child;
  uint64_t tstate_next_unique_id;
  _warnings_runtime_state warnings;
  atexit_state atexit;
  PyObject *audit_hooks;
  PyLongObject *small_ints[262];
  _Py_bytes_state bytes;
  _Py_unicode_state unicode;
  _Py_float_state float_state;
  PySliceObject *slice_cache;
  _Py_tuple_state tuple;
  _Py_list_state list;
  _Py_dict_state dict_state;
  _Py_frame_state frame;
  _Py_async_gen_state async_gen;
  _Py_context_state context;
  _Py_exc_state exc_state;
  ast_state ast;
  type_cache type_cache;
  int int_max_str_digits;
};

/* 113 */
struct _Py_atomic_address
{
  __int8 _value[8];
};

/* 112 */
typedef _Py_atomic_address _Py_atomic_address_0;

/* 116 */
struct pyinterpreters
{
  PyThread_type_lock mutex;
  PyInterpreterState *head;
  PyInterpreterState *main;
  int64_t next_id;
};

/* 118 */
struct _xidregistry
{
  PyThread_type_lock mutex;
  _xidregitem *head;
};

/* 14 */
struct $98F7FC5C6B872291EB32B1C8C894AD3F
{
  unsigned int __low;
  unsigned int __high;
};

/* 15 */
union __atomic_wide_counter
{
  unsigned __int64 __value64;
  $98F7FC5C6B872291EB32B1C8C894AD3F __value32;
};

/* 19 */
struct __pthread_cond_s
{
  __atomic_wide_counter __wseq;
  __atomic_wide_counter __g1_start;
  unsigned int __g_refs[2];
  unsigned int __g_size[2];
  unsigned int __g1_orig_size;
  unsigned int __wrefs;
  unsigned int __g_signals[2];
};

/* 22 */
union pthread_cond_t
{
  __pthread_cond_s __data;
  char __size[48];
  __int64 __align;
};

/* 16 */
struct __pthread_internal_list
{
  __pthread_internal_list *__prev;
  __pthread_internal_list *__next;
};

/* 17 */
typedef __pthread_internal_list __pthread_list_t;

/* 18 */
struct __pthread_mutex_s
{
  int __lock;
  unsigned int __count;
  int __owner;
  unsigned int __nusers;
  int __kind;
  __int16 __spins;
  __int16 __elision;
  __pthread_list_t __list;
};

/* 21 */
union pthread_mutex_t
{
  __pthread_mutex_s __data;
  char __size[40];
  __int64 __align;
};

/* 127 */
struct _gil_runtime_state
{
  unsigned __int64 interval;
  _Py_atomic_address_0 last_holder;
  _Py_atomic_int_0 locked;
  unsigned __int64 switch_number;
  pthread_cond_t cond;
  pthread_mutex_t mutex;
  pthread_cond_t switch_cond;
  pthread_mutex_t switch_mutex;
};

/* 122 */
struct _ceval_runtime_state
{
  _Py_atomic_int_0 signals_pending;
  _gil_runtime_state gil;
};

/* 20 */
typedef unsigned int pthread_key_t;

/* 130 */
struct _Py_tss_t
{
  int _is_initialized;
  pthread_key_t _key;
};

/* 129 */
typedef _Py_tss_t Py_tss_t;

/* 128 */
struct _gilstate_runtime_state
{
  int check_enabled;
  __attribute__((aligned(8))) _Py_atomic_address_0 tstate_current;
  PyInterpreterState *autoInterpreterState;
  Py_tss_t autoTSSkey;
};

/* 103 */
struct PyPreConfig
{
  int _config_init;
  int parse_argv;
  int isolated;
  int use_environment;
  int configure_locale;
  int coerce_c_locale;
  int coerce_c_locale_warn;
  int utf8_mode;
  int dev_mode;
  int allocator;
};

/* 104 */
typedef PyPreConfig PyPreConfig_0;

/* 131 */
typedef _Py_AuditHookEntry _Py_AuditHookEntry_0;

/* 134 */
struct _Py_unicode_runtime_ids
{
  PyThread_type_lock lock;
  Py_ssize_t next_index;
};

/* 111 */
struct pyruntimestate
{
  int preinitializing;
  int preinitialized;
  int core_initialized;
  int initialized;
  _Py_atomic_address_0 _finalizing;
  pyinterpreters interpreters;
  _xidregistry xidregistry;
  unsigned __int64 main_thread;
  void (*exitfuncs[32])(void);
  int nexitfuncs;
  _ceval_runtime_state ceval;
  _gilstate_runtime_state gilstate;
  PyPreConfig_0 preconfig;
  Py_OpenCodeHookFunction open_code_hook;
  void *open_code_userdata;
  _Py_AuditHookEntry_0 *audit_hook_head;
  _Py_unicode_runtime_ids unicode_ids;
};

/* 144 */
struct atexit_callback
{
  PyObject *func;
  PyObject *args;
  PyObject *kwargs;
};

/* 156 */
struct _PyAsyncGenWrappedValue
{
  PyObject ob_base;
  PyObject *agw_val;
};

/* 162 */
struct __attribute__((aligned(8))) PyBaseExceptionObject
{
  PyObject ob_base;
  PyObject *dict;
  PyObject *args;
  PyObject *traceback;
  PyObject *context;
  PyObject *cause;
  char suppress_context;
};

/* 120 */
typedef int (*crossinterpdatafunc)(PyObject *, _xid *);

/* 119 */
struct _xidregitem
{
  PyTypeObject *cls;
  crossinterpdatafunc getdata;
  _xidregitem *next;
};

/* 133 */
typedef int (*Py_AuditHookFunction)(const char *, PyObject *, void *);

/* 132 */
struct _Py_AuditHookEntry
{
  _Py_AuditHookEntry *next;
  Py_AuditHookFunction hookCFunction;
  void *userData;
};

/* 121 */
struct _xid
{
  void *data;
  PyObject *obj;
  int64_t interp;
  PyObject *(*new_object)(_xid *);
  void (*free)(void *);
};

/* 175 */
struct Nuitka_ExceptionPreservationItem
{
  PyObject *exception_type;
  PyObject *exception_value;
  PyTracebackObject *exception_tb;
};

/* 181 */
typedef PyObject *(*module_init_func)(PyThreadState *, PyObject *, const Nuitka_MetaPathBasedLoaderEntry *);

/* 182 */
struct __attribute__((aligned(8))) Nuitka_MetaPathBasedLoaderEntry
{
  const char *name;
  module_init_func python_init_func;
  int bytecode_index;
  int bytecode_size;
  int flags;
};

/* 177 */
struct $1033E493668F4B42638C3AC68815BC3A
{
  unsigned __int32 interned : 2;
  unsigned __int32 kind : 3;
  unsigned __int32 compact : 1;
  unsigned __int32 ascii : 1;
  unsigned __int32 ready : 1;
};

/* 193 */
struct PyASCIIObject
{
  PyObject ob_base;
  Py_ssize_t length;
  Py_hash_t hash;
  $1033E493668F4B42638C3AC68815BC3A state;
  wchar_t *wstr;
};

/* 194 */
struct PyCompactUnicodeObject
{
  PyASCIIObject _base;
  Py_ssize_t utf8_length;
  char *utf8;
  Py_ssize_t wstr_length;
};

/* 185 */
typedef unsigned __int8 __uint8_t;

/* 188 */
typedef __uint8_t uint8_t;

/* 192 */
typedef uint8_t Py_UCS1;

/* 186 */
typedef unsigned __int16 __uint16_t;

/* 189 */
typedef __uint16_t uint16_t;

/* 191 */
typedef uint16_t Py_UCS2;

/* 190 */
typedef uint32_t Py_UCS4;

/* 179 */
union $CD7DB831A3BD6F2FAB2FD49A3E9FE1D2
{
  void *any;
  Py_UCS1 *latin1;
  Py_UCS2 *ucs2;
  Py_UCS4 *ucs4;
};

/* 195 */
struct PyUnicodeObject
{
  PyCompactUnicodeObject _base;
  $CD7DB831A3BD6F2FAB2FD49A3E9FE1D2 data;
};

/* 197 */
struct $5C7D84E330F747689399EF59FC75E314
{
  PyTupleObject *tuple;
  Py_ssize_t tuple_index;
};

/* 199 */
struct $86C4AF2D185431431F117CC8DCCEA385
{
  PyListObject *list;
  Py_ssize_t list_index;
};

/* 201 */
struct PyModuleObject
{
  PyObject ob_base;
  PyObject *md_dict;
};

/* 203 */
struct PyDictKeyEntry
{
  Py_hash_t me_hash;
  PyObject *me_key;
  PyObject *me_value;
};

/* 204 */
typedef PyObject **Nuitka_DictEntryHandle;

/* 205 */
struct __attribute__((aligned(8))) Nuitka_FrameObject
{
  PyFrameObject m_frame;
  const char *m_type_description;
  char m_locals_storage[1];
};

/* 217 */
union $7C5C8612E70EAAEA057981BB51C1DD9C
{
  PyObject *iter;
  Nuitka_GeneratorObject *generator;
  $5C7D84E330F747689399EF59FC75E314 tuple_data;
  $86C4AF2D185431431F117CC8DCCEA385 list_data;
};

/* 285 */
typedef int Generator_Status;

/* 274 */
struct Nuitka_ExceptionStackItem
{
  PyObject *exception_type;
  PyObject *exception_value;
  PyTracebackObject *exception_tb;
};

/* 286 */
struct Nuitka_GeneratorObject
{
  PyVarObject ob_base;
  PyObject *m_name;
  PyObject *m_module;
  PyObject *m_qualname;
  PyObject *m_yield_from;
  PyObject *m_weakrefs;
  int m_running;
  void *m_code;
  Nuitka_FrameObject *m_frame;
  PyCodeObject_0 *m_code_object;
  Generator_Status m_status;
  Nuitka_ExceptionStackItem m_exc_state;
  int m_yield_return_index;
  PyObject *m_returned;
  __int64 m_counter;
  void *m_heap_storage;
  Py_ssize_t m_closure_given;
  Nuitka_CellObject *m_closure[1];
};

/* 282 */
struct Nuitka_CellObject
{
  PyObject ob_base;
  PyObject *ob_ref;
};

/* 249 */
struct _heaptypeobject
{
  PyTypeObject ht_type;
  PyAsyncMethods as_async;
  PyNumberMethods as_number;
  PyMappingMethods as_mapping;
  PySequenceMethods as_sequence;
  PyBufferProcs as_buffer;
  PyObject *ht_name;
  PyObject *ht_slots;
  PyObject *ht_qualname;
  _dictkeysobject *ht_cached_keys;
  PyObject *ht_module;
};

/* 250 */
typedef _heaptypeobject PyHeapTypeObject;

/* 251 */
struct PyByteArrayObject
{
  PyVarObject ob_base;
  Py_ssize_t ob_alloc;
  char *ob_bytes;
  char *ob_start;
  Py_ssize_t ob_exports;
};

/* 255 */
struct _PyDictViewObject
{
  PyObject ob_base;
  PyDictObject *dv_dict;
};

/* 256 */
typedef PyObject *(*PyCFunctionWithKeywords)(PyObject *, PyObject *, PyObject *);

/* 257 */
typedef PyMethodDef PyMethodDef_0;

/* 258 */
struct PyCFunctionObject
{
  PyObject ob_base;
  PyMethodDef_0 *m_ml;
  PyObject *m_self;
  PyObject *m_module;
  PyObject *m_weakreflist;
  vectorcallfunc vectorcall;
};

/* 259 */
struct PyModuleDef_Base
{
  PyObject ob_base;
  PyObject *(*m_init)(void);
  Py_ssize_t m_index;
  PyObject *m_copy;
};

/* 264 */
struct PyFunctionObject
{
  PyObject ob_base;
  PyObject *func_globals;
  PyObject *func_builtins;
  PyObject *func_name;
  PyObject *func_qualname;
  PyObject *func_code;
  PyObject *func_defaults;
  PyObject *func_kwdefaults;
  PyObject *func_closure;
  PyObject *func_doc;
  PyObject *func_dict;
  PyObject *func_weakreflist;
  PyObject *func_module;
  PyObject *func_annotations;
  vectorcallfunc vectorcall;
};

/* 265 */
struct PyMethodObject
{
  PyObject ob_base;
  PyObject *im_func;
  PyObject *im_self;
  PyObject *im_weakreflist;
  vectorcallfunc vectorcall;
};

/* 270 */
struct PyGenObject
{
  PyObject ob_base;
  PyFrameObject *gi_frame;
  PyObject *gi_code;
  PyObject *gi_weakreflist;
  PyObject *gi_name;
  PyObject *gi_qualname;
  _PyErr_StackItem gi_exc_state;
};

/* 272 */
struct PyStopIterationObject
{
  PyObject ob_base;
  PyObject *dict;
  PyObject *args;
  PyObject *traceback;
  PyObject *context;
  PyObject *cause;
  char suppress_context;
  PyObject *value;
};

/* 276 */
enum nuitka_ilong_validity : __int32
{
  NUITKA_ILONG_UNASSIGNED = 0x0,
  NUITKA_ILONG_OBJECT_VALID = 0x1,
  NUITKA_ILONG_CLONG_VALID = 0x2,
  NUITKA_ILONG_BOTH_VALID = 0x3,
  NUITKA_ILONG_EXCEPTION = 0x4,
};

/* 277 */
struct nuitka_ilong
{
  nuitka_ilong_validity validity;
  PyObject *python_value;
  __int64 c_value;
};

/* 279 */
struct seqiterobject
{
  PyObject ob_base;
  Py_ssize_t it_index;
  PyObject *it_seq;
};

/* 280 */
struct _rangeobject3
{
  PyObject ob_base;
  PyObject *start;
  PyObject *stop;
  PyObject *step;
  PyObject *length;
};

/* 281 */
typedef PyFrameObject Nuitka_ThreadStateFrameType;

/* 283 */
typedef PyObject *(*function_impl_code)(PyThreadState *, const Nuitka_FunctionObject *, PyObject **);

/* 284 */
struct Nuitka_FunctionObject
{
  PyVarObject ob_base;
  PyObject *m_name;
  PyObject *m_module;
  PyObject *m_doc;
  PyCodeObject_0 *m_code_object;
  Py_ssize_t m_args_overall_count;
  Py_ssize_t m_args_positional_count;
  Py_ssize_t m_args_keywords_count;
  bool m_args_simple;
  Py_ssize_t m_args_star_list_index;
  Py_ssize_t m_args_star_dict_index;
  Py_ssize_t m_args_pos_only_count;
  PyObject **m_varnames;
  function_impl_code m_c_code;
  vectorcallfunc m_vectorcall;
  PyObject *m_dict;
  PyObject *m_weakrefs;
  PyObject *m_defaults;
  Py_ssize_t m_defaults_given;
  PyObject *m_kwdefaults;
  PyObject *m_annotations;
  PyObject *m_qualname;
  PyObject *m_constant_return_value;
  __int64 m_counter;
  Py_ssize_t m_closure_given;
  Nuitka_CellObject *m_closure[1];
};

/* 287 */
typedef PyObject *(*generator_code)(PyThreadState *, Nuitka_GeneratorObject *, PyObject *);

/* 288 */
struct Nuitka_MethodObject
{
  PyObject ob_base;
  Nuitka_FunctionObject *m_function;
  PyObject *m_weakrefs;
  PyObject *m_object;
  PyObject *m_class;
  vectorcallfunc m_vectorcall;
};

/* 289 */
struct Nuitka_CoroutineObject
{
  PyVarObject ob_base;
  PyObject *m_name;
  PyObject *m_module;
  PyObject *m_qualname;
  PyObject *m_yield_from;
  PyObject *m_weakrefs;
  int m_running;
  int m_awaiting;
  void *m_code;
  Nuitka_FrameObject *m_frame;
  PyCodeObject_0 *m_code_object;
  Nuitka_ThreadStateFrameType *m_resume_frame;
  Generator_Status m_status;
  Nuitka_ExceptionStackItem m_exc_state;
  PyObject *m_origin;
  int m_yield_return_index;
  PyObject *m_returned;
  __int64 m_counter;
  void *m_heap_storage;
  Py_ssize_t m_closure_given;
  Nuitka_CellObject *m_closure[1];
};

/* 290 */
typedef PyObject *(*coroutine_code)(PyThreadState *, Nuitka_CoroutineObject *, PyObject *);

/* 291 */
struct Nuitka_CoroutineWrapperObject
{
  PyObject ob_base;
  Nuitka_CoroutineObject *m_coroutine;
};

/* 292 */
struct Nuitka_AsyncgenObject
{
  PyVarObject ob_base;
  PyObject *m_name;
  PyObject *m_module;
  PyObject *m_qualname;
  PyObject *m_yield_from;
  PyObject *m_weakrefs;
  int m_running;
  int m_awaiting;
  int m_running_async;
  void *m_code;
  Nuitka_FrameObject *m_frame;
  PyCodeObject_0 *m_code_object;
  Nuitka_ThreadStateFrameType *m_resume_frame;
  Generator_Status m_status;
  Nuitka_ExceptionStackItem m_exc_state;
  int m_yield_return_index;
  PyObject *m_finalizer;
  bool m_hooks_init_done;
  bool m_closed;
  __int64 m_counter;
  void *m_heap_storage;
  Py_ssize_t m_closure_given;
  Nuitka_CellObject *m_closure[1];
};

/* 293 */
typedef PyObject *(*asyncgen_code)(PyThreadState *, Nuitka_AsyncgenObject *, PyObject *);

/* 296 */
struct Nuitka_AIterWrapper
{
  PyObject ob_base;
  PyObject *aw_aiter;
};

/* 297 */
struct Nuitka_AsyncgenWrappedValueObject
{
  PyObject ob_base;
  PyObject *m_value;
};

/* 298 */
enum AwaitableState : __int32
{
  AWAITABLE_STATE_INIT = 0x0,
  AWAITABLE_STATE_ITER = 0x1,
  AWAITABLE_STATE_CLOSED = 0x2,
};

/* 299 */
struct __attribute__((aligned(8))) Nuitka_AsyncgenAsendObject
{
  PyObject ob_base;
  Nuitka_AsyncgenObject *m_gen;
  PyObject *m_sendval;
  AwaitableState m_state;
};

/* 300 */
struct __attribute__((aligned(8))) Nuitka_AsyncgenAthrowObject
{
  PyObject ob_base;
  Nuitka_AsyncgenObject *m_gen;
  PyObject *m_args;
  AwaitableState m_state;
};

/* 301 */
struct calliterobject
{
  PyObject ob_base;
  PyObject *it_callable;
  PyObject *it_sentinel;
};

/* 302 */
struct dictviewobject
{
  PyObject ob_base;
  PyDictObject *dv_dict;
};

/* 303 */
typedef PyObject *PyDictValues;

/* 307 */
struct GenericAliasObject
{
  PyObject ob_base;
  PyObject *origin;
  PyObject *args;
  PyObject *parameters;
};

/* 308 */
typedef PyObject *(*copy_func)(PyThreadState *, PyObject *);

/* 309 */
struct Nuitka_PyCapsule
{
  PyObject ob_base;
  void *pointer;
  const char *name;
  void *context;
  PyCapsule_Destructor destructor;
};

/* 315 */
struct Nuitka_LoaderObject
{
  PyObject ob_base;
  const Nuitka_MetaPathBasedLoaderEntry *m_loader_entry;
};

/* 316 */
typedef PyObject *(*entrypoint_t)(void);

/* 317 */
struct Nuitka_ResourceReaderObject
{
  PyObject ob_base;
  const Nuitka_MetaPathBasedLoaderEntry *m_loader_entry;
};

/* 318 */
struct Nuitka_ResourceReaderFilesObject
{
  PyObject ob_base;
  const Nuitka_MetaPathBasedLoaderEntry *m_loader_entry;
  PyObject *m_path;
};

